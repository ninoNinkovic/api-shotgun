.. vim: ft=rst sts=2 sw=2 tw=70
.. default-role:: literal

======================================================================
                             api-shotgun
======================================================================
----------------------------------------------------------------------
                  Shotgun testing tool for web APIs
----------------------------------------------------------------------

:Author: Roman Neuhauser
:Contact: rneuhauser@suse.cz
:Copyright: This document is in the public domain.

.. contents::

Overview
========

`api-shotgun` looks for bugs in a web application by generating
various, mostly invalid requests.
5xx errors are obviously symptoms of bugs; `api-shotgun` can also
help find unexpected status codes and response bodies.

`api-shotgun` is a complement, not a replacement, to controller
unit tests.
It is basically just a dumb URL generator and has no notion of
setup or teardown.

The HTTP requests performed are derived from two input files: a list
of URL templates (routes) and configuration of input parameters.

`api-shotgun` generates an URL for each distinct combination of
values of pertinent parameters.

Responses are stored in files under `response/`.

Requirements
============

`api-shotgun` requires `Node.js` 0.[6-8] and `npm`.
`GNU make` is recommended.

Usage
=====

::

  git clone https://github.com/roman-neuhauser/api-shotgun.git
  cd api-shotgun
  make bootstrap
  git clone https://github.com/roman-neuhauser/api-shotgun-studio-v2.git config
  ./bin/api-shotgun http://apiuser:apikey@machine[:port]

Inputs
======

Routes
******

This file follows a grammar sketched in the following simplified
(only some significant whitespace is included) ABNF_ grammar: ::

  specs     = *spec

  spec      = method HS path NL params NL*
  method    = "DELETE" / "GET" / "POST" / "PUT"
  path      = 1*("/" pathseg)
  pathseg   = p_ref / segment
  segment   = 1*(WCHAR / ".")
  params    = *param
  param     = HS (mparam / oparam)
  mparam    = "!" pbody  ; mandatory
  oparam    = "?" pbody  ; optional
  pbody     = pname "=" p_ref NL
  pname     = 1*WCHAR
  p_ref     = ":" pcode
  pcode     = 1*WCHAR
  WCHAR     = ALPHA / DIGIT / "_"

.. _ABNF: http://tools.ietf.org/html/rfc5234

The `routes` file distinguishes mandatory and optional parameters;
this distinction is not reflected in runtime behavior at all, it is
present only as a form of documentation: `api-shotgun` generates
requests missing mandatory parameters with great pleasure.

Example ::

  POST   /api/v2/user/appliances
         ! clone_from = :app
         ? name       = :appname
         ? arch       = :arch

Parameters
**********

This file is a Node.js module exporting an object where each
property is one of the `p_ref`\s found in `routes`, with its
value being an array of values to use in generated requests.
`undefined` results in this parameter being left out of the
query string completely.

Example ::

  module.exports =
    app:     [undefined, '', 0, 1]
    appname: ['', '~!@#$%^&*()+|-']
    arch:    ['x86_64']

Outputs
=======

URLs
****

The examples in Inputs_ would generate the following requests: ::

  POST /api/v2/user/appliances?name=&arch=x86_64
  POST /api/v2/user/appliances?name=~!%40%23%24%25%5E%26*()%2B%7C-&arch=x86_64
  POST /api/v2/user/appliances?clone_from=&name=&arch=x86_64
  POST /api/v2/user/appliances?clone_from=&name=~!%40%23%24%25%5E%26*()%2B%7C-&arch=x86_64
  POST /api/v2/user/appliances?clone_from=0&name=&arch=x86_64
  POST /api/v2/user/appliances?clone_from=0&name=~!%40%23%24%25%5E%26*()%2B%7C-&arch=x86_64
  POST /api/v2/user/appliances?clone_from=1&name=&arch=x86_64
  POST /api/v2/user/appliances?clone_from=1&name=~!%40%23%24%25%5E%26*()%2B%7C-&arch=x86_64

Notice that `clone_from` (`:app`) is outright missing from two URLs
since its configuration includes `undefined`, and empty in another
two, thanks to `''` in the configuration.
OTOH, `name` (`:appname`) is present in all URLs, if only empty.

Logging
*******

`api-shotgun` outputs a line for each request being sent, and each
response being received.
Runtime errors, if any, are reported on `stderr`.

Requests
++++++++

Grammar: ::

  request   = datetime SP "<" SP http_meth SP http_path
  datetime  = date SP time "Z"
  http_meth = "DELETE" / "GET" / "POST" / "PUT"
  date      = 4*DIGIT "-" 2*DIGIT "-" 2*DIGIT
  time      = 2*DIGIT ":" 2*DIGIT ":" 2*DIGIT

Example: ::

  2013-01-26 11:39:35Z < POST /api/v2/user/appliances?name=&arch=x86_64

Responses
+++++++++

Grammar: ::

  response  = datetime SP ">" SP http_status SP http_meth SP http_path

Example: ::

  2013-01-26 11:39:37Z > 400 POST /api/v2/user/appliances?name=&arch=x86_64

Errors
++++++

Grammar: ::

  error = datetime SP freeform

Example: ::

  2013-01-26 11:39:45Z Error: getaddrinfo ENOENT

Files
*****

`api-shotgun` stores responses received from the server under
`response/`.
Filenames are formed according to this grammar: ::

  http_meth "_" http_path_alt
  ; http_path_alt is http_path with s#/#.#g

Example (for `GET /api/v2/user/appliances/0`): ::

  GET_.api.v2.user.appliances.0

When a request fails on the socket level (timeout or similar),
the corresponding file is removed.
Otherwise, its contents obey the following grammar: ::

  response = header NL response_entity
  header   = http_status SP http_meth SP http_path NL

Example: ::

  404 GET /api/v2/user/appliances/0

  <error>
    <code>invalid_appliance_id</code>
    <message>Invalid appliance id.</message>
  </error>
